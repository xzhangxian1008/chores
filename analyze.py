import os
from matplotlib import pyplot as plt

file = "bench_result"
query_num = 43
ch_results = []
tiup_tpch_results = {}

interval = [10, 50, 200, 500, 1000]

v1_data = [

, "84 571109 425848 536749 517388 481953 437852 425113 422996 264439 404553 195623 148037 348165 535616 179065 296474 304773 414610 177368 185695 397639 187493 421414 180280 356121 263571 373734 210864 180403 187777 446240 217531 451824 149434 41621 349299 258384 437387 153157 137763 77276 464594 180375 261208 261804 150115 125423 189854 416100 209026 336051 160476 177202 219845 393006 198643 360232 194187 148561 302907 267028 14935 33813 1626 308388 100065 2696 6510 24291 191731 3609 199115 162931 134920 5365 2560 166059 183251 79534 14716 1960 221950 95864 3651 6934 81024 185332 214766 86429 613 61245 946 3006 5291 917 881 1364 5607 768 236160 465910 551605 514142 578252 502547 484470 366991 568989 414646 555726 347320 556504 265314 114953 511104 242644 427789 196554 131493 122637 151620 144776"
, "21 512773 441978 253163 339830 270612 296706 301072 257987 248045 246673 245863 181799 280413 247174 251472 79350 104415 104687 76444 110890 80856 122014 37308 2524 60975 527477 480749 468549 283504 219618"
, "8 448800 278543 275929 264264 233577 249111 95108 95206 89852 31618 500328 291631"
, "4 363671 270097 241344 95157 60735 395979"]

v2_data = [

, "254470 907642 454834 194716 460560 208333 937483 564906 227871 274756 885330 333777 711283 178890 188198 731938 228193 198227 222813 749740 214310 204954 207685 473006 197828 181143 211642 455290 220501 202975 198919 194160 214064 204642 164408 83628 51437 172629 180519 155858 147259 165068 422380 160143 160902 161472 153182 156030 152235 139417 156023 156731 108577 27047 5673 7583 7259 4917 6774 66812 24481 5663 2759 723 1888 5039 8474 8263 7394 5436 5607 7886 9063 8663 6546 4384 7339 5819 6307 1225 1027 115549 109408 16489 675640 649057 1077921 745935 142728 181193 619918 140482 160077 163008 687059 133050 141457 165561 154868 154851 165867 160696 137986 165082 48555 4063 7281 265722 153935 78399 1894 7521 8786 8963 8115 9322 7441 4815 355600 4859 3095 7865 7192"
, "63617 504438 484648 551286 331805 346273 270868 267144 202529 126029 164066 227123 155730 140187 11891 25746 2758 7292 6998 6733 3594 229271 653910 275418 281143 160287 128080 107750 24150 8460 92092"
, "25447 511643 375737 255394 156860 182685 41586 5125 5826 433384 206628 102361 41852"
, "12723 443690 206127 112135 5475 320006 72107"]

class LocalTunnelDataParser:
    def parse(string_data):
        str_nums = string_data.split(" ")
        nums = []
        size = len(str_nums)
        i = 0
        while i < size:
            nums.append(int(str_nums[i]))
            i += 1
        return nums


class Chart:
    def __init__(self, chart_data, title):
        self.chart_data = chart_data
        self.title = title

    def paint(self, picture_saved_name):
        raise Exception("Chart doesn't implement this function.")

# from matplotlib import pyplot as plt
# #设置x
# x=range(0,8)
# #设置y
# y=[14,17,19,11,14,13,15,16]
# #plot函数需要两个参数，一个是x一个是y
# plt.plot(x,y)
# plt.show()
class LineChart(Chart):
    def __init__(self, chart_data, title):
        Chart.__init__(self, chart_data, title)

    def paint(self, picture_saved_name):
        x0 = range(0, len(self.chart_data[0]))
        x1 = range(0, len(self.chart_data[1]))
        y0 = self.chart_data[0]
        y1 = self.chart_data[1]
        # print(x)
        # print(y0)
        plt.plot(x0, y0, label="local tunnel v1")
        plt.plot(x1, y1, label="local tunnel v2")
        plt.xlabel("sampling")
        plt.ylabel("push time/ns")
        plt.title(self.title)
        plt.grid(alpha=0.5)
        plt.legend()
        plt.savefig(picture_saved_name, dpi=300,format="png")
        # plt.show()


class QueryInfo:
    def __init__(self, id, times):
        self.id = id
        self.times = times

    def addTime(self, time):
        self.times.append(time)

    def getAverageTime(self):
        time_sum = 0
        for time in self.times:
            time_sum += time
        return time_sum / len(self.times)

    def getMinTime(self):
        min_time = 9999999999
        for time in self.times:
            if time < min_time:
                min_time = time
        return min_time

    def getInfoAvg(self):
        return "Q%d: %f" % (self.id, self.getAverageTime())

    def getInfoMin(self):
        return "Q%d: %f" % (self.id, self.getMinTime())
    
    def getAllInfo(self):
        return "Q%d: %.2f %.2f" % (self.id, self.getMinTime(), self.getAverageTime())

def printQueryInfosAvg(infos):
    sum = 0
    for info in infos:
        print(info.getInfoAvg())
        sum += info.getAverageTime()
    print("Sum: %f" % sum)

def printQueryInfosMin(infos):
    sum = 0
    for info in infos:
        print(info.getInfoMin())
        sum += info.getMinTime()
    print("Sum: %f" % sum)

def analyzeTiUPTPCH(file_name):
    with open(file_name, 'r') as f:
        lines = f.readlines()
        analyzeTiUPTPCHImpl(lines)

def analyzeTiUPTPCHImpl(lines):
    for data in lines:
        data = data[11:] # remove "[Current] Q"
        data = data[:-2] # remove the last 's\n' characters
        info = data.split()
        info[0] = info[0][:-1]
        q_num = int(info[0])
        time = float(info[1])
        if q_num in tiup_tpch_results:
            tiup_tpch_results[q_num].addTime(time)
        else:
            tiup_tpch_results[q_num] = QueryInfo(q_num, [time])

def printTiUPResults():
    min_sum = 0
    avg_sum = 0
    for value in tiup_tpch_results.values():
        print(value.getAllInfo())
        min_sum = min_sum + value.getMinTime()
        avg_sum = avg_sum + value.getAverageTime()
    print("Sum: %.2f %.2f" % (min_sum, avg_sum))

def analyzeCHBench():
    with open(file, 'r') as f:
        data = f.readlines()
        if len(data) != query_num:
            exit(-1)
        analyzeCHBenchImpl(data)

def analyzeCHBenchImpl(data):
    query_id = 0
    for item in data:
        query_id += 1
        time = ""
        times = []
        for char in item:
            if char == '[':
                continue
            elif char == ',':
                times.append(float(time))
                time = ""
            elif char == ']':
                times.append(float(time))
                time = ""
                break
            else:
                time += char
        ch_results.append(QueryInfo(query_id, times))

def paint(index):
    v1_data_list = LocalTunnelDataParser.parse(v1_data[index])
    v2_data_list = LocalTunnelDataParser.parse(v2_data[index])

    title = "interval %d" % interval[index]
    line_chart = LineChart([v1_data_list, v2_data_list], title)
    line_chart.paint("%s.png" % title)

if __name__ == "__main__":
    analyzeTiUPTPCH("tmp")
    printTiUPResults()

    # analyze ClickHouse bench data
    # analyzeCHBench()
    # printQueryInfosMin(results)
